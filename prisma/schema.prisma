// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  profile           Profile?
  wordProgress      UserWordProgress[]
  stationAttempts   StationAttempt[]
  achievements      UserAchievement[]
  runProgress       UserRunProgress[]

  @@map("users")
}

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  displayName      String
  avatarUrl        String?
  preferredLanguage String  @default("he-IL") // UI language
  ageGroup         AgeGroup @default(CHILD)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Language {
  id   String @id @default(cuid())
  code String @unique // e.g., "ko-KR"
  name String // "Korean"
  rtl  Boolean @default(false)

  // Relations
  maps   Map[]
  words  Word[]

  @@map("languages")
}

model Map {
  id         String   @id @default(cuid())
  languageId String
  name       String // "South Korea"
  svgPathUrl String
  orderIndex Int

  // Relations
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
  stations Station[]
  runProgress UserRunProgress[]

  @@map("maps")
}

model Station {
  id                   String   @id @default(cuid())
  mapId                String
  name                 String
  description          String
  orderIndex           Int
  isLockedByDefault    Boolean  @default(true)
  positionX            Float    // SVG position
  positionY            Float

  // Relations
  map           Map            @relation(fields: [mapId], references: [id], onDelete: Cascade)
  words         StationWord[]
  attempts      StationAttempt[]

  @@map("stations")
}

model Word {
  id                    String   @id @default(cuid())
  languageId            String
  lemma                 String // Original text (안녕하세요)
  phonetic              String // Romanization (annyeonghaseyo)
  translationHe         String // Hebrew translation
  translationEn         String // English translation
  partOfSpeech          PartOfSpeech
  exampleNative         String // Korean example sentence
  exampleTranslationHe  String // Hebrew example translation

  // Relations
  language      Language        @relation(fields: [languageId], references: [id], onDelete: Cascade)
  stationWords  StationWord[]
  media         WordMedia[]
  progress      UserWordProgress[]

  @@map("words")
}

model StationWord {
  id         String @id @default(cuid())
  stationId  String
  wordId     String
  orderIndex Int // 1..10

  // Relations
  station Station @relation(fields: [stationId], references: [id], onDelete: Cascade)
  word    Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([stationId, orderIndex])
  @@map("station_words")
}

model MediaAsset {
  id         String   @id @default(cuid())
  type       MediaType
  url        String
  mime       String
  durationMs Int?     // For audio/video
  width      Int?     // For images/video
  height     Int?     // For images/video
  alt        String   // Accessibility
  createdAt  DateTime @default(now())

  // Relations
  wordMedia WordMedia[]

  @@map("media_assets")
}

model WordMedia {
  id       String   @id @default(cuid())
  wordId   String
  mediaId  String
  role     MediaRole

  // Relations
  word  Word       @relation(fields: [wordId], references: [id], onDelete: Cascade)
  media MediaAsset @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@map("word_media")
}

model UserWordProgress {
  id             String           @id @default(cuid())
  userId         String
  wordId         String
  status         ProgressStatus   @default(NOT_STARTED)
  lastSeenAt     DateTime?
  correctStreak  Int              @default(0)
  totalAttempts  Int              @default(0)
  totalCorrect   Int              @default(0)
  updatedAt      DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  word Word @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([userId, wordId])
  @@map("user_word_progress")
}

model StationAttempt {
  id         String   @id @default(cuid())
  userId     String
  stationId  String
  startedAt  DateTime @default(now())
  finishedAt DateTime?
  score      Int      // 0..10
  passed     Boolean  @default(false)

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  station Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@map("station_attempts")
}

model Achievement {
  id          String @id @default(cuid())
  code        String @unique
  name        String
  description String
  iconUrl     String

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Character {
  id             String @id @default(cuid())
  name           String
  spriteIdleUrl  String
  spriteWalkUrl  String

  @@map("characters")
}

model UserRunProgress {
  id                String   @id @default(cuid())
  userId            String
  mapId             String
  currentStationId  String?
  charactersPair    Json     // {lead: characterId, buddy: characterId}
  lastPositionPx    Json     // {x: number, y: number}
  updatedAt         DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  map     Map     @relation(fields: [mapId], references: [id], onDelete: Cascade)

  @@unique([userId, mapId])
  @@map("user_run_progress")
}

// Enums
enum AgeGroup {
  CHILD
  TEEN
  ADULT
}

enum PartOfSpeech {
  NOUN
  VERB
  ADJECTIVE
  ADVERB
  PRONOUN
  PREPOSITION
  INTERJECTION
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
}

enum MediaRole {
  IMAGE
  PRONUNCIATION
  USAGE_VIDEO
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  LEARNED
}
